// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using GuildDataApi.Models;

namespace GuildDataApi.Data
{
    public partial class GuildDataBaseContext : DbContext
    {
        public GuildDataBaseContext()
        {
        }

        public GuildDataBaseContext(DbContextOptions<GuildDataBaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<RightsTemplate> RightsTemplate { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=\"85.215.175.92, 1433\\SQLEXPRESS\";Initial Catalog=GuildDataBase;Persist Security Info=True;User ID=sa;Password=X.rt56fg56");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Latin1_General_CI_AS");

            modelBuilder.Entity<RightsTemplate>(entity =>
            {
                entity.HasKey(e => e.IdRightsTemplate);

                entity.ToTable("rights_template");

                entity.Property(e => e.IdRightsTemplate).HasColumnName("id_rights_template");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("description");

                entity.Property(e => e.IsAdmin).HasColumnName("isAdmin");

                entity.Property(e => e.IsInitialUser).HasColumnName("isInitialUser");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.ToTable("user");

                entity.HasIndex(e => new { e.IdUser, e.Username }, "IX_user")
                    .IsUnique();

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("firstname");

                entity.Property(e => e.FkRightsTemplates).HasColumnName("fk_rights_templates");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("lastname");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("password");

                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(40)
                    .HasColumnName("phonenumber");

                entity.Property(e => e.Salt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("salt");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("username");

                entity.HasOne(d => d.FkRightsTemplatesNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.FkRightsTemplates)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_user_rights_templates");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}